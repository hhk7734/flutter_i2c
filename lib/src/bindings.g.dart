// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `liblot_i2c`
class LibLotI2c {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibLotI2c(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibLotI2c.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int init(
    ffi.Pointer<ffi.Int8> device,
  ) {
    return _init(
      device,
    );
  }

  late final _init_ptr = _lookup<ffi.NativeFunction<_c_init>>('lot_i2c_init');
  late final _dart_init _init = _init_ptr.asFunction<_dart_init>();

  void dispose(
    int fd,
  ) {
    return _dispose(
      fd,
    );
  }

  late final _dispose_ptr =
      _lookup<ffi.NativeFunction<_c_dispose>>('lot_i2c_dispose');
  late final _dart_dispose _dispose = _dispose_ptr.asFunction<_dart_dispose>();

  void transmit(
    int fd,
    int slaveAddress,
    ffi.Pointer<ffi.Uint8> tx_buf,
    int tx_size,
  ) {
    return _transmit(
      fd,
      slaveAddress,
      tx_buf,
      tx_size,
    );
  }

  late final _transmit_ptr =
      _lookup<ffi.NativeFunction<_c_transmit>>('lot_i2c_transmit');
  late final _dart_transmit _transmit =
      _transmit_ptr.asFunction<_dart_transmit>();

  void receive(
    int fd,
    int slaveAddress,
    ffi.Pointer<ffi.Uint8> rx_buf,
    int rx_size,
  ) {
    return _receive(
      fd,
      slaveAddress,
      rx_buf,
      rx_size,
    );
  }

  late final _receive_ptr =
      _lookup<ffi.NativeFunction<_c_receive>>('lot_i2c_receive');
  late final _dart_receive _receive = _receive_ptr.asFunction<_dart_receive>();

  void transceive(
    int fd,
    int slaveAddress,
    ffi.Pointer<ffi.Uint8> tx_buf,
    int tx_size,
    ffi.Pointer<ffi.Uint8> rx_buf,
    int rx_size,
  ) {
    return _transceive(
      fd,
      slaveAddress,
      tx_buf,
      tx_size,
      rx_buf,
      rx_size,
    );
  }

  late final _transceive_ptr =
      _lookup<ffi.NativeFunction<_c_transceive>>('lot_i2c_transceive');
  late final _dart_transceive _transceive =
      _transceive_ptr.asFunction<_dart_transceive>();
}

class __fsid_t extends ffi.Opaque {}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __STDC_NO_THREADS__ = 1;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 27;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

typedef _c_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
);

typedef _dart_init = int Function(
  ffi.Pointer<ffi.Int8> device,
);

typedef _c_dispose = ffi.Void Function(
  ffi.Int32 fd,
);

typedef _dart_dispose = void Function(
  int fd,
);

typedef _c_transmit = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  ffi.Int32 tx_size,
);

typedef _dart_transmit = void Function(
  int fd,
  int slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  int tx_size,
);

typedef _c_receive = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 slaveAddress,
  ffi.Pointer<ffi.Uint8> rx_buf,
  ffi.Int32 rx_size,
);

typedef _dart_receive = void Function(
  int fd,
  int slaveAddress,
  ffi.Pointer<ffi.Uint8> rx_buf,
  int rx_size,
);

typedef _c_transceive = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  ffi.Int32 tx_size,
  ffi.Pointer<ffi.Uint8> rx_buf,
  ffi.Int32 rx_size,
);

typedef _dart_transceive = void Function(
  int fd,
  int slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  int tx_size,
  ffi.Pointer<ffi.Uint8> rx_buf,
  int rx_size,
);
