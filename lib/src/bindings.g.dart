// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `liblot_i2c`
class LibLotI2c {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibLotI2c(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibLotI2c.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int init(
    ffi.Pointer<ffi.Int8> device,
  ) {
    return _init(
      device,
    );
  }

  late final _init_ptr = _lookup<ffi.NativeFunction<_c_init>>('lot_i2c_init');
  late final _dart_init _init = _init_ptr.asFunction<_dart_init>();

  void dispose(
    int fd,
  ) {
    return _dispose(
      fd,
    );
  }

  late final _dispose_ptr =
      _lookup<ffi.NativeFunction<_c_dispose>>('lot_i2c_dispose');
  late final _dart_dispose _dispose = _dispose_ptr.asFunction<_dart_dispose>();

  void transmit(
    int fd,
    int slaveAddress,
    ffi.Pointer<ffi.Uint8> tx_buf,
    int tx_size,
  ) {
    return _transmit(
      fd,
      slaveAddress,
      tx_buf,
      tx_size,
    );
  }

  late final _transmit_ptr =
      _lookup<ffi.NativeFunction<_c_transmit>>('lot_i2c_transmit');
  late final _dart_transmit _transmit =
      _transmit_ptr.asFunction<_dart_transmit>();

  void receive(
    int fd,
    int slaveAddress,
    ffi.Pointer<ffi.Uint8> rx_buf,
    int rx_size,
  ) {
    return _receive(
      fd,
      slaveAddress,
      rx_buf,
      rx_size,
    );
  }

  late final _receive_ptr =
      _lookup<ffi.NativeFunction<_c_receive>>('lot_i2c_receive');
  late final _dart_receive _receive = _receive_ptr.asFunction<_dart_receive>();

  void transceive(
    int fd,
    int slaveAddress,
    ffi.Pointer<ffi.Uint8> tx_buf,
    int tx_size,
    ffi.Pointer<ffi.Uint8> rx_buf,
    int rx_size,
  ) {
    return _transceive(
      fd,
      slaveAddress,
      tx_buf,
      tx_size,
      rx_buf,
      rx_size,
    );
  }

  late final _transceive_ptr =
      _lookup<ffi.NativeFunction<_c_transceive>>('lot_i2c_transceive');
  late final _dart_transceive _transceive =
      _transceive_ptr.asFunction<_dart_transceive>();
}

class __fsid_t extends ffi.Opaque {}

typedef _c_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
);

typedef _dart_init = int Function(
  ffi.Pointer<ffi.Int8> device,
);

typedef _c_dispose = ffi.Void Function(
  ffi.Int32 fd,
);

typedef _dart_dispose = void Function(
  int fd,
);

typedef _c_transmit = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  ffi.Int32 tx_size,
);

typedef _dart_transmit = void Function(
  int fd,
  int slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  int tx_size,
);

typedef _c_receive = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 slaveAddress,
  ffi.Pointer<ffi.Uint8> rx_buf,
  ffi.Int32 rx_size,
);

typedef _dart_receive = void Function(
  int fd,
  int slaveAddress,
  ffi.Pointer<ffi.Uint8> rx_buf,
  int rx_size,
);

typedef _c_transceive = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  ffi.Int32 tx_size,
  ffi.Pointer<ffi.Uint8> rx_buf,
  ffi.Int32 rx_size,
);

typedef _dart_transceive = void Function(
  int fd,
  int slaveAddress,
  ffi.Pointer<ffi.Uint8> tx_buf,
  int tx_size,
  ffi.Pointer<ffi.Uint8> rx_buf,
  int rx_size,
);
